# -*- coding: utf-8 -*-

"""
IO - ShapeMapper 2.x Profile
================
"""

import re

from neoRNA.library.shape_mapper.shape_profile_item import ShapeProfileItem


class ShapeProfileIO(object):
    r"""
    IO to parse "Profile" file generated by ShapeMapper 2.x.

    The "profile" file is the results file after running of ShapeMapper 2.x.
    It includes the following info for each of the "sequence nt":
    - mutation count
    - mutation rate
    - reactivity (diff. types - Original, High-quality, Normalized)

    The "mutation info" includes diff. data reads - "modified", "untreated", "denatured".

    The file is in `tsv`.

    Current Header:
    - Nucleotide
    - Sequence
    - Modified_mutations
    - Modified_read_depth
    - Modified_effective_depth
    - Modified_rate
    - Untreated_mutations
    - Untreated_read_depth
    - Untreated_effective_depth
    - Untreated_rate
    - Denatured_mutations
    - Denatured_read_depth
    - Denatured_effective_depth
    - Denatured_rate
    - Reactivity_profile
    - Std_err
    - HQ_profile
    - HQ_stderr
    - Norm_profile
    - Norm_stderr
    """

    # If the `tsv` file includes "header"
    HAS_HEADER = True

    # Number of attributes
    NUM_ATTRIBUTES = 20
    # The delimiter used to split the content
    DELIMITERS = '\t'

    # ----------------------------------
    # region Iterator Generator

    @classmethod
    def parse_iterator(cls, handle):
        r"""
        Iterate over records and parse it as objects.

        Parameters
        ----------
        handle: any
            input file.

        Returns
        -------
        parsed_objects: Library
            Parsed objects.


        Usage
        -------
        >>> with open("rna_lib.rlib") as handle:
        ...     for record in ShapeProfileIO.parse_iterator(handle):
        ...         print(record)
        ...

        """

        for data_list in cls.parse(handle):
            yield ShapeProfileItem(data_list)

    # endregion

    # ----------------------------------
    # region Parser

    @classmethod
    def parse(cls, handle):
        """
        Parse the file.

        Parameters
        ----------
        handle: handle
            input file.

        Returns
        -------
            A tuple of strings.

        """

        # Check if need to skip the "header"
        if cls.HAS_HEADER:
            handle.readline()

        # Loop in
        line = handle.readline()
        while line:
            # Parse it
            __delimiters = cls.DELIMITERS
            __max_attributes = cls.NUM_ATTRIBUTES
            parts = re.split(__delimiters, line.strip())

            # The line has to have the first THREE attributes
            if not len(parts) >= 2:
                raise ValueError('The line must have at least 2 attributes', line)

            # Add `None` to missing attributes
            parts += [None] * (__max_attributes - len(parts))

            # Directly return "all" parts
            yield parts

            #
            line = handle.readline()

        if not line:
            return  # StopIteration

    # endregion

